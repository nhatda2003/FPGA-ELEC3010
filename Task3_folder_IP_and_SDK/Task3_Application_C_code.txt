#include <stdio.h>
#include <stdint.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_io.h"


#define REG0_OFFSET 0x00
#define REG1_OFFSET 0x04
#define REG2_OFFSET 0x08
#define REG3_OFFSET 0x0C

uint32_t read_register(uint32_t base_address, uint32_t offset) {
    volatile uint32_t* register_address = (volatile uint32_t*)((uintptr_t)base_address + offset);
    return *register_address;
}

void write_register(uint32_t base_address, uint32_t offset, uint32_t value) {
    volatile uint32_t* register_address = (volatile uint32_t*)((uintptr_t)base_address + offset);
    *register_address = value;
}

int main()
{
    init_platform();
    print("Hello World\n\r");
    print("Hello World\n\r");
    print("Hello World\n\r");
    print("Hello World\n\r");

    uint16_t num1, num2;
    uint32_t put_in_reg;

    // input
    num1 = 6789;
    num2 = 1234;

    // concatenate 32bits to put in register
    put_in_reg = (num1 << 16) | num2;
    printf("Num1: %u\n", num1);
    printf("Num2: %u\n", num2);

    // write the register
    write_register(XPAR_FINAL_0_S00_AXI_BASEADDR, REG0_OFFSET, put_in_reg);
    write_register(XPAR_FINAL_0_S00_AXI_BASEADDR, REG2_OFFSET, 0b00000000000000000000000000000001); //start = 1

    // logic to check if the result is ready using bit o_done
    uint32_t reg0_value;
    	while(1){
    		reg0_value = read_register(XPAR_FINAL_0_S00_AXI_BASEADDR, REG1_OFFSET);
    	if (reg0_value & 0b00000000000000010000000000000000){ // evaluate if o_done = 1 or not
    			break;
    }
    }

    // print result
    uint16_t result = (uint16_t) (reg0_value & 0xFFFF);
    printf("Done, result is: %u\n", result);


    cleanup_platform();
    return 0;
}
